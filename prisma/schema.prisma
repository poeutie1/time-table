// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  createdAt    DateTime       @default(now())
  name         String?        
  image         String?     
  emailVerified DateTime?

  // あなたの既存モデルとのリレーション
  courses      Course[]
  tags         Tag[]
  requirements Requirement[]

  // NextAuth 用リレーション
  accounts     Account[]
  sessions     Session[]
}

model Course {
  id         String       @id @default(uuid())
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  title      String
  dayOfWeek  Int          // 0=日曜…6=土曜
  period     Int          // 時限番号
  credits    Int          @default(2)
  createdAt  DateTime     @default(now())
  coursesTags CourseTag[]
}

model Tag {
  id         String       @id @default(uuid())
  user       User         @relation(fields: [userId], references: [id])
  userId     String
  name       String
  createdAt  DateTime     @default(now())
  coursesTags CourseTag[]
  @@unique([userId, name])
}

model CourseTag {
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  tag      Tag    @relation(fields: [tagId], references: [id])
  tagId    String

  @@id([courseId, tagId])
}

model Requirement {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  name        String
  targetCount Int       // 目標単位数など
  createdAt   DateTime  @default(now())
}

// --- NextAuth Models ---
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
